<p>Appwrite permission mechanism offers a simple and yet flexible way to manage which users, teams, or roles can access a specific resource of your project, like documents and files.</p>

<p>Using permissions, you can decide that only <span class="tag">user A</span> and <span class="tag">user B</span> will have read and update access to a specific database document, while <span class="tag">user C</span> and <span class="tag">team X</span> will be the only ones with create and delete access.</p>

<p>As the name suggests, read permission allows a user to view a resource, create allows users to create new resources, update allows a user to make changes to a resource, and delete allows the user to remove the resource.</p>

<p>All permissions can be granted to inividual or groups of users, entire teams, or only to team members with a specific role. Permission can also be granted based on authentication status such as to all users, only authenticated users, or only guest users.</p>

<p>A project user can only grant a resource with permissions that they own. For example, if a user is trying to share a document with a team that they are not a member of, they will encounter a 401 not authorized error.</p>

<div class="notice calm margin-top-large margin-bottom-large">
    <h4>Appwrite Resource</h4>
    
    <p>An Appwrite resource can be a database, collection, document, bucket, or a file. Each resource has read, write, update, and delete permissions to define who can interact with it.</p>
    
    <p>Using the Appwrite permissions mechanism, you can grant resource access to users, teams, and members with different roles.</p>
</div>

<h2 id="default-values"><a href="/docs/permissions#default-values">Default Values</a></h2>

<p>When not providing a resource with read or write permissions, the default value will be empty. When a read or write permissions is missing, no one will be granted access control to the resource.</p>

<div class="notice calm margin-top-large margin-bottom-large">
    <h4>Note</h4>
    
    <p>You will need an active session to perform database transactions for your collections.</p>
    <p>If you have rules where you grant access for all users or guests in a collection, you can create an Anonymous Session before you make the API call.</p>
</div>

<h2 id="server-integration"><a href="/docs/permissions#server-integration">Server Integration</a></h2>

<p>A server or <a href="/docs/admin">admin integration</a> can be used for increased flexibility. When using a Server SDK in combination with the proper <a href="/docs/keys#scopes">API key scopes</a>, you can have all types of access to any of your project resources regardless of their permissions.</p>

<p>Using the server integration flexibility, you can change resource permissions, share resources between different users and teams, or edit and delete them without any limitations.</p>

<h2 id="types"><a href="/docs/permissions#types">Permission Types</a></h2>

<table class="full text-size-small">
    <thead>
    <tr>
        <td style="width: 180px">Type</td>
        <td>Description</td>
    </tr>
    </thead>
    <tbody>
    <tr>
        <td>
            any
            <p class="margin-top-small text-fade">version >= 0.12</p>
        </td>
        <td>Gives access to anyone.</td>
    </tr>
    <tr>
        <td>
            guests
            <p class="margin-top-small text-fade">version >= 0.16</p>
        </td>
        <td>Access to any guest user. Logged in users don't have access to this role.</td>
    </tr>
    <tr>
        <td>user:[USER_ID]</td>
        <td>Access to a specific user by his UID.</td>
    </tr>
    <tr>
        <td>team:[TEAM_ID]</td>
        <td>Access to any member of the specific team. To gain access to this permission, the user must be the team creator (owner), or receive and accept an invitation to join this team.</td>
    </tr>
    <tr>
        <td>team:[TEAM_ID]/[ROLE]</td>
        <td>Access to any member who possesses a specific role in a team. To gain access to this permission, the user must be a member of the specific team and have the given role assigned to him or her. Team roles can be assigned when inviting a user to become a team member.</td>
    </tr>
    <tr>
        <td>member:[MEMBER_ID]</td>
        <td>Access to a specific member of a team. Unlike the basic user permission, this permission will only be valid as long as the user is still an active member of the specific team. To view user member ID, fetch the team <a href="/docs/client/teams#teamsGetMemberships">members list</a>.</td>
    </tr>
    </tbody>
</table>

<h2 id="access-types"><a href="/docs/permissions#access-types">Access Types</a></h2>
<table class="full text-size-small">
    <thead>
    <tr>
        <td style="width: 180px">Type</td>
        <td>Description</td>
    </tr>
    </thead>
    <tbody>
    <tr>
        <td>Permission.read()</td>
        <td>Access to view a resource. Does not apply to functions.</td>
    </tr>
    <tr>
        <td>Permission.create()</td>
        <td>Access to create new resources. Only applies to collections, applying this type of access results in an error. Does not apply to functions.</td>
    </tr>
    <tr>
        <td>Permission.update()</td>
        <td>Access to alter a resource, but not remove or create new resources. Does not apply to functions.</td>
    </tr>
    <tr>
        <td>Permission.delete()</td>
        <td>Access to remove a resource. Does not apply to functions.</td>
    </tr>
    <tr>
        <td>Permission.execute()</td>
        <td>Access to execute an Appwrite Function.</td>
    </tr>
    </tbody>
</table>

<h2 id="examples"><a href="/docs/permissions#examples">Examples</a></h2>

<p>The examples below will show you how you can use the different Appwrite permissions to manage access control to your project resources.</p>

<p>The following examples are using the <a href="https://github.com/appwrite/sdk-for-js" target="_blank" rel="noopener">Appwrite Web SDK</a> but can be applied similarly to any of the other <a href="/docs/sdks">Appwrite SDKs</a>.</p>

<h3 id="example-1"><a href="/docs/permissions#example-1">Example #1 - Basic Usage</a></h3>

<p>In the following example, we are creating a document that can be viewed by anyone, edited by writers or admins, and deleted by a user with UID <span class="tag">user:5c1f88b42259e</span> or administrators.</p>

<div class="ide" data-lang="javascript" data-lang-label="Web SDK">
    <pre class="line-numbers"><code class="prism language-javascript" data-prism>import { Client, Databases } from "appwrite";
        
const client = new Client();

client
    .setEndpoint('https://[HOSTNAME_OR_IP]/v1')
    .setProject('[PROJECT_ID]');

const databases = new Databases(client, '[DATABASE_ID]');

let promise = databases.createDocument(
    '[COLLECTION_ID]', // Collection ID
    {'actorName': 'Chris Evans', 'height': 183}, // Data
    [ // Permissions
        Permission.read("all"), // Anyone can view this document
        Permission.edit(["team:writers", "team:admin"]), // Only writers and admins can edit this document
        Permission.delete("user:5c1f88b42259e") 
        Permission.delete("team:admin") // Only user 5c1f88b42259e and admins can delete this document
    ]
);

promise.then(function (response) {
    console.log(response);
}, function (error) {
    console.log(error);
});

</code></pre>
</div>

<h3 id="example-2"><a href="/docs/permissions#example-2">Example #2 - Team Roles</a></h3>

<p>In the following example, we are creating a document that can be read-only by members of <span class="tag">team:5c1f88b87435e</span> and can only be edited, or deleted by members of the same team that possesses the role <span class="tag">owner</span>.</p>

<div class="ide" data-lang="javascript" data-lang-label="Web SDK">
    <pre class="line-numbers"><code class="prism language-javascript" data-prism>import { Client, Databases } from "appwrite";
        
const client = new Client();

client
    .setEndpoint('https://[HOSTNAME_OR_IP]/v1')
    .setProject('[PROJECT_ID]');

const databases = new Databases(client, '[DATABASE_ID]');

let promise = databases.createDocument(
    '[COLLECTION_ID]',
    {'actorName': 'Chris Evans', 'height': 183},
    [
        Permissions.read('team:5c1f88b87435e')
        Permissions.edit('team:5c1f88b87435e/owner'),
        Permissions.delete('team:5c1f88b87435e/owner'),
    ], // The user must be a team member to grant these permissions
);

promise.then(function (response) {
    console.log(response);
}, function (error) {
    console.log(error);
});

</code></pre>
</div>