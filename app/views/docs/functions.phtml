<?php

use Utopia\View;

$events = $this->getParam('events', []);
$runtimes = $this->getParam('runtimes', []);

?>

<p>Appwrite Functions allow you to extend and customize your Appwrite server functionality by executing your custom code. Appwrite can execute your custom code in response to any <a href="/docs/webhooks#events" target="_blank">Appwrite system event</a> like account creation, user login, or document update. You can also schedule your functions to run according to a CRON schedule or start them manually by triggering your function from an HTTP endpoint using the Appwrite client or server APIs.</p>

<p>Appwrite Functions run in a secure, isolated Docker container. By default, Appwrite supports multiple runtimes for different languages that you can use to run your code.</p>

<h2><a href="/docs/functions#addFunction" id="addFunction">Add Your Function</a></h2>

<p>You can add a new function from your Appwrite project's dashboard. Access your Functions settings from your project's left navigation panel. Click the 'Add Function' button and choose your function name and code runtime. In your Functions settings page, you can set your function event triggers, CRON schedule, and set secure environment variables for your function runtime.</p>

<h2><a href="/docs/functions#deployCode" id="deployCode">Deploy Your Code</a></h2>

<p>You can deploy your code using the <a href="/docs/command-line">Appwrite CLI</a> tool, the Appwrite <a href="/docs/getting-started-for-server">Server API</a> or manually from the Appwrite console.</p>

<h3><a href="/docs/functions#createTag" id="createTag">Create Tag</a></h3>

<ul class="phases clear" data-ui-phases>
    <li>
        <h3>Unix</h3>

        <div class="ide margin-bottom" data-lang="bash" data-lang-label="Bash">
            <pre class="line-numbers"><code class="prism language-bash" data-prism>appwrite functions createTag \
    --functionId=6012cc93d5a7b \
    --entrypoint="index.js" \
    --code="/myrepo/myfunction"</code></pre>
        </div>
    </li>
    <li>
        <h3>CMD</h3>

        <div class="ide margin-bottom" data-lang="bash" data-lang-label="CMD">
            <pre class="line-numbers"><code class="prism language-bash" data-prism>appwrite functions createTag ^
    --functionId=6012cc93d5a7b ^
    --entrypoint="index.js" ^
    --code="/myrepo/myfunction"</code></pre>
        </div>
    </li>
    <li>
        <h3>PowerShell</h3>

        <div class="ide margin-bottom" data-lang="bash" data-lang-label="PowerShell">
            <pre class="line-numbers"><code class="prism language-bash" data-prism>appwrite functions createTag ,
    --functionId=6012cc93d5a7b ,
    --entrypoint="index.js" ,
    --code="/myrepo/myfunction"</code></pre>
        </div>
    </li>
</ul>

<p>The command above accepts two parameters:</p>

<table cellspacing="0" cellpadding="0" border="0" class="full margin-bottom text-size-small">
    <thead>
    <tr>
        <th style="width: 140px">Name</th>
        <th>Description</th>
    </tr>
    </thead>
    <tbody>
    <tr>
        <td>functionId</td>
        <td>The ID of the Function you created in the previous step. You can find your function ID on your function page in your project dashboard.</td>
    </tr>
    <tr>
        <td>entrypoint</td>
        <td>The file name of your custom code that is executed when the function is triggered.</td>
    </tr>
    <tr>
        <td>code</td>
        <td>Gzip file with your code package. When used with the Appwrite CLI, pass the path to your code directory, and the CLI will automatically package your code. <br /><br /><b>For increased security, The Appwrite CLI only has access to file paths within the current working directory. In other words, it doesn't support file paths that try to access the parent directories (../../mycode).</b></td>
    </tr>
    </tbody>
</table>

<p><a href="/docs/server/functions#functionsCreateTag" rel="noopener"><i class="icon-angle-circled-right margin-start-negative-tiny margin-end-tiny"></i> You can also deploy new code tags using the Appwrite server API</a></p>

<div class="notice">
    <h3>Handling Dependencies</h3>

        <p>With Appwrite Version 0.12 and later dependencies can now be handled by the build stage when your tag is activated however certain steps must be made to ensure that dependencies can be correctly detected and installed.</p>

        <p>These steps differ from language to language and are outlined below:</p>

    <p><b>Python</b></p>

    <p>For python dependencies, All you need to do is ensure a requirements.txt file is present in your code tarball</p>

    <p><b>Dart</b></p>

    <div class="ide margin-bottom" data-lang="bash" data-lang-label="Bash">
        <pre class="line-numbers"><code class="prism language-bash" data-prism>PUB_CACHE=./.appwrite pub get</code></pre>
    </div>

    <p><b>Deno</b></p>

    <p>Dependency fetching is already handled automatically and no extra steps are needed for dependencies to be cached for deno.</p>

    <p><b>Ruby</b></p>

    <p>For ruby dependencies, All you need to do is ensure a Gemfile file is present in your code tarball</p>

    <p><b>PHP</b></p>

    <p>For php dependencies simply bundle your composer.json file with your code tarball however you must make sure the name of your project in composer.json is `user/function` otherwise dependencies will not work and tag building may fail.</p>

    <p><b>Node</b></p>

    <p>For node dependencies, All you need to do is ensure a package.json file is present in your code tarball</p>

    <p><b>Rust</b></p>

    <!-- TODO: JAVA, RUST and DART -->
</div>

<h3>Exporting your code functions</h3>
<p>With the new execution model introduced in 0.12 functions are now no longer executed directly from the interpreter but are instead imported into the runtime. This means that your code will need to be formatted specificially for the runtime you are using.</p>

<ul class="phases clear" data-ui-phases>
    <li>
        <h3>Node.js</h3>
        <div class="ide margin-top-small" data-lang="bash" data-lang-label="Bash">
            <pre class="line-numbers"><code class="prism language-bash" data-prism>npm install node-appwrite --save</code></pre>
        </div>
    </li>
    <li>
        <h3>PHP</h3>
        <div class="ide margin-top-small" data-lang="bash" data-lang-label="Bash">
            <pre class="line-numbers"><code class="prism language-bash" data-prism>composer require 'appwrite/appwrite'</code></pre>
        </div>
    </li>
    <li>
        <h3>Python</h3>
        <div class="ide margin-top-small" data-lang="bash" data-lang-label="Bash">
            <pre class="line-numbers"><code class="prism language-bash" data-prism>pip install appwrite</code></pre>
        </div>
    </li>
    <li>
        <h3>Ruby</h3>
        <div class="ide margin-top-small" data-lang="bash" data-lang-label="Bash">
            <pre class="line-numbers"><code class="prism language-bash" data-prism>gem install appwrite</code></pre>
        </div>
    </li>
    <li>
        <h3>Deno</h3>
        <div class="ide margin-top-small" data-lang="typescript" data-lang-label="Deno SDK">
            <pre class="line-numbers"><code class="prism language-typescript" data-prism>import * as sdk from "https://deno.land/x/appwrite/mod.ts";</code></pre>
        </div>
    </li>
    <li>
        <h3>Dart</h3>
        <div class="ide margin-top-small" data-lang="bash" data-lang-label="Bash">
            <pre class="line-numbers"><code class="prism language-bash" data-prism>dart pub add dart_appwrite</code></pre>
        </div>
    </li>
    <h3>Rust</h3>
        <div>
            <p>Add the Appwrite Swift SDK package as a dependency</p>
            <div class="ide margin-top-small" data-lang="swift" data-lang-label="Swift">
            <pre class="line-numbers"><code class="prism language-swift" data-prism>dependencies: [
    // ...
    .package(url: "https://github.com/appwrite/sdk-for-swift.git", from: "0.0.1")
    // ...
]</code></pre>
            </div>
            <p>Add the dependency product to your target</p>
            <div class="ide margin-top-small" data-lang="swift" data-lang-label="Swift">
            <pre class="line-numbers"><code class="prism language-swift" data-prism>dependencies: [
    .product(name: "Appwrite", package: "sdk-for-swift"),
]</code></pre>
        </div>
    </li>
</ul>

<h2><a href="/docs/functions#execute" id="execute">Execute</a></h2>

<p>Besides setting a schedule or allowing your function to listen to Appwriteâ€™s system events, you can also manually execute your cloud functions from your Appwrite console or API.</p>

<?php
$image = new View(__DIR__.'/../general/image.phtml');
    echo $image
        ->setParam('srcLight', '/images-ee/docs/functions-light.png')
        ->setParam('srcDark', '/images-ee/docs/functions-dark.png')
        ->setParam('alt', 'Function settings page.')
        ->setParam('description', 'Function settings page.')
        ->render();
?>

<p>To execute a function from the Appwrite console, click the 'Execute Now' button on your function's overview page. To execute a function from the API, send a POST request to the <a href="/docs/client/functions#functionsCreateExecution" target="_blank">function execution endpoint</a>.</p>

<p>The function execution endpoint is available from both Appwrite client and server APIs. To execute your function from the <b>server API</b>, you need an API key with 'execution.write' scope.</p>

<p>Executing the function from the <b>client API</b> requires the current user to have execution permission for the function. You can change the execution permission from the function's settings page in the Appwrite console, by default no user, team, or role has this permission.</p>

<ul class="phases clear" data-ui-phases>
    <li>
        <h3>Web</h3>
        <div class="ide margin-bottom" data-lang="javascript" data-lang-label="Web SDK">
            <pre class="line-numbers"><code class="prism language-javascript" data-prism>const sdk = new Appwrite();

sdk
    .setEndpoint('https://[HOSTNAME_OR_IP]/v1') // Your API Endpoint
    .setProject('5df5acd0d48c2') // Your project ID
;

let promise = sdk.functions.createExecution('[FUNCTION_ID]');

promise.then(function (response) {
    console.log(response); // Success
}, function (error) {
    console.log(error); // Failure
});</code></pre>
        </div>
    </li>
    <li>
        <h3>Flutter</h3>

        <div class="ide margin-bottom" data-lang="dart" data-lang-label="Flutter SDK">
            <pre class="line-numbers"><code class="prism language-dart" data-prism>import 'package:appwrite/appwrite.dart';

void main() { // Init SDK
  Client client = Client();
  Functions functions = Functions(client);

  client
    .setEndpoint('https://[HOSTNAME_OR_IP]/v1') // Your API Endpoint
    .setProject('5df5acd0d48c2') // Your project ID
  ;

  Future result = functions.createExecution(
    functionId: '[FUNCTION_ID]',
  );

  result
    .then((response) {
      print(response);
    }).catchError((error) {
      print(error.response);
  });
}</code></pre>
        </div>
    </li>
</ul>


<h3><a href="/docs/functions#abuseLimits" id="abuseLimits">Abuse and Limits</a></h3>

<p>Appwrite allows your project's end-users to execute Cloud Functions using client API or your client SDK. Execution is permitted to any user who has been granted the "execute" permission in your Cloud Functions settings page. The execution permission can accept any of the typical Appwrite <a href="/docs/permissions">permission types</a>.</p>

<p>When triggering a Cloud Function execution from the client, your users will be limited to a specific amount of execution per minute to make sure your Appwrite server is not being abused. The default limit is 60 calls per 1 minute. You can edit this limit using the server <a href="/docs/environment-variables#functions">environment variables</a>.</p>

<h2><a href="/docs/functions#supportedRuntimes" id="supportedRuntimes">Supported Runtimes</a></h2>

<p>Appwrite provides multiple code runtimes to execute your custom functions. Each runtime uses a Docker image tied to a specific language version to provide a safe, isolated playground to run your team's code.</p>

<p>Below is a list of supported Cloud Functions runtimes. The Appwrite team continually adds support for new runtimes. You can easily change which runtimes your Appwrite setup supports by editing your server <a href="/docs/environment-variables#functions">environment variables</a>.</p>

<table cellspacing="0" cellpadding="0" border="0" class="full margin-bottom-large">
    <thead>
        <tr>
            <th style="width: 50px"></th>
            <th style="width: 120px">Name</th>
            <th>Image</th>
            <th>Architectures</th>
        </tr>
    </thead>
    <tbody>
        <?php foreach($runtimes as $key => $runtime): ?>
        <tr>
            <td><img src="" data-ls-attrs="src=/images/runtimes/<?php echo $this->escape($runtime['logo'] ?? ''); ?>" alt="Function Env." class="avatar xxs" /></td>
            <td><span data-general-copy><?php echo $this->escape($key); ?> </span></td>
            <td><a href="https://hub.docker.com/r/<?php echo $this->escape(strtok($runtime['image'], ':')); ?>" target="_blank" rel="noopener"><?php echo $this->escape($runtime['image'] ?? ''); ?> <i class="icon-link-ext"></i></a></td>
            <td><?php echo $this->escape(implode(' / ', $runtime['supports'] ?? [])); ?></td>
        </tr>
        <?php endforeach; ?>
    </tbody>
</table>

<h2><a href="/docs/functions#environmentVariables" id="environmentVariables">Environment Variables</a></h2>

<p>Environment variables supplied by Appwrite in addition to your own defined environment variables that you can access from your function code. These variables give you information about your execution runtime environment.</p>

<table cellspacing="0" cellpadding="0" border="0" class="full margin-bottom-large">
    <thead>
        <tr>
            <th style="width: 250px">Name</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>
                APPWRITE_FUNCTION_ID
            </td>
            <td>Your function's unique ID.</td>
        </tr>
        <tr>
            <td>
                APPWRITE_FUNCTION_NAME
            </td>
            <td>Your function's name.</td>
        </tr>
        <tr>
            <td>
                APPWRITE_FUNCTION_TAG
            </td>
            <td>Your function's code tag unique ID.</td>
        </tr>
        <tr>
            <td>
                APPWRITE_FUNCTION_TRIGGER
            </td>
            <td>Either 'event' when triggered by one of the selected scopes, 'http' when triggered by an HTTP request or the Appwrite Console, or 'schedule' when triggered by the cron schedule.</td>
        </tr>
        <tr>
            <td>
                APPWRITE_FUNCTION_RUNTIME_NAME
            </td>
            <td>Your function runtime name. Can be any of Appwrite supported execution runtimes.</td>
        </tr>
        <tr>
            <td>
                APPWRITE_FUNCTION_RUNTIME_VERSION
            </td>
            <td>Your function runtime version.</td>
        </tr>
        <tr>
            <td>
                APPWRITE_FUNCTION_EVENT
            </td>
            <td>Your function event name. This value is available only when your function trigger is 'event.' This variable value can be any of Appwrite <a href="/docs/webhooks#events">system events</a>.</td>
        </tr>
        <tr>
            <td>
                APPWRITE_FUNCTION_EVENT_DATA
            </td>
            <td>Your function event payload. This value is available only when your function trigger is 'event'. This variable value contains a string in JSON format with your specific event data.</td>
        </tr>
        <tr>
            <td>
                APPWRITE_FUNCTION_DATA
                <p class="margin-top-small text-fade">version >= 0.8.0</p>
            </td>
            <td>Your function's custom execution data. This variable's value contains a string in any format. If the custom data is in JSON FORMAT, it must be parsed inside the function code. Note that this variable can be set only when triggering a function using the <a href="https://appwrite.io/docs/client/functions?sdk=web#functionsCreateExecution">SDK or HTTP API</a> and the Appwrite Dashboard.</td>
        </tr>
        <tr>
            <td>
                APPWRITE_FUNCTION_PROJECT_ID
                <p class="margin-top-small text-fade">version >= 0.8.0</p>
            </td>
            <td>Your function's project ID.</td>
        </tr>
        <tr>
            <td>
                APPWRITE_FUNCTION_USER_ID
                <p class="margin-top-small text-fade">version >= 0.8.0</p>
            </td>
            <td>The userId of the user that triggered your function's execution. Executions triggered in the Appwrite console will be prepended with "admin-".</td>
        </tr>
        <tr>
            <td>
                APPWRITE_FUNCTION_JWT
                <p class="margin-top-small text-fade">version >= 0.8.0</p>
            </td>
            <td>A <a href="https://jwt.io/">JSON Web Token</a> generated for the user that executes your function.</td>
        </tr>
        <tr>
            <td>
                APPWRITE_FUNCTION_EVENT_PAYLOAD
                <p class="margin-top-small text-fade">version &lt; 0.8.0 <span class="text-danger">(deprecated)</span></p>
            </td>
            <td>Your function event payload. Deprecated in favor of APPWRITE_FUNCTION_EVENT_DATA in version 0.8.0.</td>
        </tr>
        <tr>
            <td>
                APPWRITE_FUNCTION_ENV_NAME
                <p class="margin-top-small text-fade">version &lt; 0.8.0 <span class="text-danger">(deprecated)</span></p>
            </td>
            <td>Your function environment name. Can be any of Appwrite supported execution environments.</td>
        </tr>
        <tr>
            <td>
                APPWRITE_FUNCTION_ENV_VERSION
                <p class="margin-top-small text-fade">version &lt; 0.8.0 <span class="text-danger">(deprecated)</span></p>
            </td>
            <td>Your function environment version.</td>
        </tr>
    </tbody>
</table>

<h2><a href="/docs/functions#monitorDebug" id="monitorDebug">Monitor & Debug</a></h2>

<p>You can monitor your function execution usage stats and logs from your Appwrite console. To access your functions usage stats and logs, click the 'Usage' tab in your function dashboard.</p>

<p>The usage screen in your console will allow you to track the number of execution and your function CPU usage time. You can also review a detailed log of your function execution history, including the function exit code, output log, and error log.</p>

<?php
$image = new View(__DIR__.'/../general/image.phtml');
    echo $image
        ->setParam('srcLight', '/images-ee/docs/functions-monitor-light.png')
        ->setParam('srcDark', '/images-ee/docs/functions-monitor-dark.png')
        ->setParam('alt', 'Function usage and logs tracking.')
        ->setParam('description', 'Function usage and logs tracking.')
        ->render();
?>

<h2><a href="/docs/functions#demosExamples" id="demosExamples">Demos & Examples</a></h2>

<p>There are many Cloud Function demos and examples created by the Appwrite team and community in multiple coding languages. These examples are available at our <a href="https://github.com/appwrite/demos-for-functions" target="_blank" rel="noopener">demos repository</a> on GitHub. You can also submit your examples by submitting a <a href="https://github.com/appwrite/demos-for-functions/pulls" target="_blank" rel="noopener">pull-request</a>.</p>
